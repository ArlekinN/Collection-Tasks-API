# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.section import Section  # noqa: F401,E501
from swagger_server import util


class Task(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str = None, name: str = None, section: Section = None, complexity: str = None, description: str = None):  # noqa: E501
        """Task - a model defined in Swagger

        :param id: The id of this Task.  # noqa: E501
        :type id: str
        :param name: The name of this Task.  # noqa: E501
        :type name: str
        :param section: The section of this Task.  # noqa: E501
        :type section: Section
        :param complexity: The complexity of this Task.  # noqa: E501
        :type complexity: str
        :param description: The description of this Task.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'section': Section,
            'complexity': str,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'section': 'section',
            'complexity': 'complexity',
            'description': 'description'
        }
        self._id = id
        self._name = name
        self._section = section
        self._complexity = complexity
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Task.

        Уникальный идентификатор задачи  # noqa: E501

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Task.

        Уникальный идентификатор задачи  # noqa: E501

        :param id: The id of this Task.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Task.

        Название задачи  # noqa: E501

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Task.

        Название задачи  # noqa: E501

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def section(self) -> Section:
        """Gets the section of this Task.


        :return: The section of this Task.
        :rtype: Section
        """
        return self._section

    @section.setter
    def section(self, section: Section):
        """Sets the section of this Task.


        :param section: The section of this Task.
        :type section: Section
        """

        self._section = section

    @property
    def complexity(self) -> str:
        """Gets the complexity of this Task.

        Уровень сложности задачи  # noqa: E501

        :return: The complexity of this Task.
        :rtype: str
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity: str):
        """Sets the complexity of this Task.

        Уровень сложности задачи  # noqa: E501

        :param complexity: The complexity of this Task.
        :type complexity: str
        """
        allowed_values = ["very easy", "easy", "medium", "difficult", "very difficult"]  # noqa: E501
        if complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `complexity` ({0}), must be one of {1}"
                .format(complexity, allowed_values)
            )

        self._complexity = complexity

    @property
    def description(self) -> str:
        """Gets the description of this Task.

        Описание задачи  # noqa: E501

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Task.

        Описание задачи  # noqa: E501

        :param description: The description of this Task.
        :type description: str
        """

        self._description = description
